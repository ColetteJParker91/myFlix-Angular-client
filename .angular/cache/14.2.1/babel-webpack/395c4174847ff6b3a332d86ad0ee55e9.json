{"ast":null,"code":"import { catchError } from \"rxjs\";\nimport { HttpHeaders } from \"@angular/common/http\";\nimport { throwError } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\"; //Declaring the api url that will provide data for the client app\n\nconst apiUrl = \"https://best-marvel-movies.herokuapp.com/\";\nexport let FetchApiDataService = /*#__PURE__*/(() => {\n  class FetchApiDataService {\n    // Inject HttpClient module to constructor params\n    // This will provide the HttpClient to the entire class,  making it available via this http\n    constructor(http) {\n      this.http = http;\n    }\n    /**\n     * calls API endpoint to register a new user\n     * @param userDetails\n     * @returns a new user object in JSON format\n     */\n\n\n    userRegistration(userDetails) {\n      console.log(userDetails);\n      return this.http.post(apiUrl + \"users\", userDetails).pipe(catchError(this.handleError));\n    }\n    /**\n     * calls API endpoint to login an existing user\n     * @param userDetails\n     * @returns data of the user in JSON format\n     */\n\n\n    userLogin(userDetails) {\n      return this.http.post(apiUrl + \"login\", userDetails).pipe(catchError(this.handleError));\n    }\n    /**\n     * calls API endpoint to get data on all movies\n     * @returns array of all movies in JSON format\n     */\n\n\n    getAllMovies() {\n      // Get Authorization token stored in local storage\n      const token = localStorage.getItem(\"token\");\n      return this.http.get(apiUrl + \"movies\", {\n        headers: new HttpHeaders({\n          Authorization: \"Bearer \" + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    }\n    /**\n     * calls API endpoint to get data on a single movie specified by its title\n     * @param title\n     * @returns JSON object holding movie data\n     */\n\n\n    getSingleMovie(title) {\n      // Get Authorization token stored in local storage\n      const token = localStorage.getItem(\"token\");\n      return this.http.get(apiUrl + `movies/${title}`, {\n        headers: new HttpHeaders({\n          Authorization: \"Bearer \" + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    }\n    /**\n     * calls API endpoint to get data on a director\n     * @param name\n     * @returns JSON obejct holding director data\n     */\n\n\n    getDirector(name) {\n      // Get Authorization token stored in local storage\n      const token = localStorage.getItem(\"token\");\n      return this.http.get(apiUrl + `movies/director/${name}`, {\n        headers: new HttpHeaders({\n          Authorization: \"Bearer \" + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    }\n    /**\n     * calls API endpoint to get data on a genre\n     * @param name\n     * @returns JSON object holding genre data\n     */\n\n\n    getGenre(name) {\n      // Get Authorization token stored in local storage\n      const token = localStorage.getItem(\"token\");\n      return this.http.get(apiUrl + `movies/genre/${name}`, {\n        headers: new HttpHeaders({\n          Authorization: \"Bearer \" + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    }\n    /**\n     * calls API endpoint to get data on a single user\n     * @returns JSON object holding data about the requested user\n     */\n\n\n    getUser() {\n      // Get Authorization token stored in local storage\n      const token = localStorage.getItem(\"token\"); // Get Username stored in local storage\n\n      const username = localStorage.getItem(\"user\");\n      return this.http.get(apiUrl + `users/${username}`, {\n        headers: new HttpHeaders({\n          Authorization: \"Bearer \" + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    }\n    /**\n     * calls API endpoint to get list of favorite movies of this user\n     * @returns list of the user's favorite movies in JSON format\n     */\n\n\n    getFavoriteMovies() {\n      // Get Authorization token stored in local storage\n      const token = localStorage.getItem(\"token\"); // Get Username stored in local storage\n\n      const username = localStorage.getItem(\"user\");\n      return this.http.get(apiUrl + `users/${username}/movies`, {\n        headers: new HttpHeaders({\n          Authorization: \"Bearer \" + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    }\n    /**\n     * calls API endpoint to add a movie to the user's list of favorite movies\n     * @param movieID\n     * @returns JSON object holding data about the updated user\n     */\n\n\n    addFavoriteMovie(movieID) {\n      // Get Authorization token stored in local storage\n      const token = localStorage.getItem(\"token\"); // Get Username stored in local storage\n\n      const username = localStorage.getItem(\"user\");\n      return this.http.post(apiUrl + `users/${username}/movies/${movieID}`, null, {\n        headers: new HttpHeaders({\n          Authorization: \"Bearer \" + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    }\n    /**\n     * calls API endpoint to delete a movie from the user's list of favorite movies\n     * @param movieID\n     * @returns JSON object holding data about the updated user\n     */\n\n\n    removeFavoriteMovie(movieID) {\n      // Get Authorization token stored in local storage\n      const token = localStorage.getItem(\"token\"); // Get Username stored in local storage\n\n      const username = localStorage.getItem(\"user\");\n      return this.http.delete(apiUrl + `users/${username}/movies/${movieID}`, {\n        headers: new HttpHeaders({\n          Authorization: \"Bearer \" + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    }\n    /**\n     * calls API endpoint to allow user to update their user information\n     * @param updateDetails\n     * @returns JSON object holding data about the updated user\n     */\n\n\n    editUser(updateDetails) {\n      // Get Authorization token stored in local storage\n      const token = localStorage.getItem(\"token\"); // Get Username stored in local storage\n\n      const username = localStorage.getItem(\"user\");\n      return this.http.put(apiUrl + `users/${username}`, updateDetails, {\n        headers: new HttpHeaders({\n          Authorization: \"Bearer \" + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    }\n    /**\n     * calls API endpoint to deregister an existing user\n     * @returns\tA success message indicating that the profile was successfully deleted.\n     */\n\n\n    deleteUser() {\n      // Get Authorization token stored in local storage\n      const token = localStorage.getItem(\"token\"); // Get Username stored in local storage\n\n      const username = localStorage.getItem(\"user\");\n      return this.http.delete(apiUrl + `users/${username}`, {\n        headers: new HttpHeaders({\n          Authorization: \"Bearer \" + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    }\n    /**\n     * extracts response data from HTTP response\n     * @param res\n     * @returns response body or empty object\n     */\n\n\n    extractResponseData(res) {\n      const body = res;\n      return body || [];\n    }\n    /**\n     * handles errors\n     * @param error\n     * @returns error message\n     */\n\n\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error(\"Some error occured:\", error.error.message);\n      } else {\n        console.error(`Error Status code ${error.status}, ` + `Error Body is: ${error.error}`);\n      }\n\n      return throwError(\"Something bad happened; please try again later.\");\n    }\n\n  }\n\n  FetchApiDataService.ɵfac = function FetchApiDataService_Factory(t) {\n    return new (t || FetchApiDataService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  FetchApiDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FetchApiDataService,\n    factory: FetchApiDataService.ɵfac,\n    providedIn: \"root\"\n  });\n  return FetchApiDataService;\n})();","map":null,"metadata":{},"sourceType":"module"}